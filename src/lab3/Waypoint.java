package lab3;
/**
 * Этот класс представляет шаг в поиске пути алгоритмом А*.
 * Путевые точки включают местоположения, предыдущей путевой точки в пути
 * и некоторых значений стоимости, используемых для определения наилучшего пути.
 **/
public class Waypoint
{
    /** Местоположение путевой точки **/
    Location loc;

    /**
     * Предыдущая путевая точка в пути, или null если это начало поиска А*
     **/
    Waypoint prevWaypoint;

    /**
     * Это поле хранит общую предыдущую стоимость проезда от начальной точки к этой путевой точке
     * через цепочку путевых точек. Фактическая стоимость следования пути; не включает никаких оценок
     **/
    private float prevCost;

    /**
     * Это поле хранит оценку оставшейся стоимости пути от этой путевой точки до конечного пункта
     **/
    private float remainingCost;


    /**
     * Создаем новую путевую точку для указанного места. При желании можно указать предыдущую
     * путевую точку или указать null, чтобы указать, что путевая точка
     * является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращает местоположение точки. **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     * Возвращает предыдущую точку пути или null если
     * это начало пути.
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /**
     * Этот мутатор позволяет установить предыдущую и оставшуюся стоимость в одном вызове метода.
     * Обычно эти значения установливаются в любом случае одновременно.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость достижения этой точки из начального положения
     * через ряд точек этой цепи.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращает оценку оставшейся стоимости от текущей точки
     * до пункта назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Возвращает оценку общей стоимости для этой путевой точки. Включает в себя
     * фактическую стоимость проезда к этой точке из начального положения, а также
     * оценку оставшейся стоимости проезда от текущей точки до конечного пункта назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

